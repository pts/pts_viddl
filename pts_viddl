#! /bin/sh
# by pts@fazekas.hu at Mon Jul 10 23:16:21 CEST 2017

""":" #pts_viddl: best-quality video downloader

type python2.7 >/dev/null 2>&1 && exec python2.7 -- "$0" ${1+"$@"}
type python2.6 >/dev/null 2>&1 && exec python2.6 -- "$0" ${1+"$@"}
type python2.5 >/dev/null 2>&1 && exec python2.5 -- "$0" ${1+"$@"}
type python2.4 >/dev/null 2>&1 && exec python2.4 -- "$0" ${1+"$@"}
exec python -- ${1+"$@"}; exit 1

This is free software, GNU GPL >=2.0. There is NO WARRANTY. Use at your risk.

pts_viddl is a command-line tool written in Python 2.x for downloading video
files. It calls youtube-dl to do the work, but has improved best-quality
detection (i.e. better than `youtube-dl -f bestvideo+bestaudio/best'), has
better automatic output file naming, and can skip already downloaded videos.

pts_viddl has much fewer features than youtube-dl (i.e. just a few
command-line flags), and it supports only a few video hosting sites (e.g.
youtube.com and facebook.com explicitly and some more implicitly).

Usage: pts_viddl [<flag> ...] <video-url> ...
Flags:
-f format: Audio and video formats to download. Like youtube-dl, but also
  supports bestfixed (default).
-F: Instead of downloading, query the availabel video and audio formats.
  Like youtube-dl.
"""

# TODO(pts): Fail on disk full. How to detect it? media_scan.py mp4 errors?
#

import os
import os.path
import pipes
import re
import subprocess
import sys
import urllib


def get_module_docstring():
  return __doc__


def get_doc(doc=None):
  if doc is None:
    doc = get_module_docstring()
  doc = doc.rstrip()
  doc = re.sub(r'\A:"\s*#', '', doc, 1)
  doc = re.sub(r'\n(\ntype python.*)+\nexec python -- .*', '', doc, 1)
  doc = re.sub('\n\n(?=This is free software)', '\n', doc, 1)
  return doc


NUM_K_RE = re.compile(r'(\d+)k\Z')

VIDRES_RE = re.compile(r'(\d+)x(\d+)\Z')

SIMPLE_RE = re.compile(r'[^a-zA-Z0-9]+')

DOWNLOADED_FILENAME_RE = re.compile(
    r'ptsviddl_(.*?)~~~[.][.][.](.*)[.][.][.]~~~[.](\w+)')
# 75 is too much, 60 is OK for http://youtube.com/watch?v=-Idz69OOqpc
# Default: 78.
DOWNLOADED_FILENAME_FORMAT = 'ptsviddl_%(id)s~~~...%(title).78s...~~~.%(ext)s'

YOUTUBE_VIDEO_URL_RE = re.compile(
    r'(?:https?://(?:\w+[.])?(?:youtube[.]com)/watch[?]v=|'
    r'https?://(?:\w+[.])?(?:(?:youtube|yourepeat|youtuberepeater)[.](?:com|it)/(?:watch|watch_popup|view_play_list)/?[?])(?:[^&]*&)*?v=|'
    r'https?://(?:youtu[.]be|(?:www[.])?youtube[.]com/v)/|'
    r')([-\w]{11})(?:\Z|[/?&\#])')
FACEBOOK_VIDEO_URL_RE = re.compile(
    r'https?://(?:\w+[.])?facebook[.]com/(?:([^/?&]+)/videos/(?:vl[.]\d+/)?|watch/[?]v=)(\d+)(?:[/?&]|\Z)')
XHAMSTER_VIDEO_URL_RE = re.compile(
    r'https?://((?:\w+[.])?xhamster[.]com/videos/[^/?&]*-(\d+))(?:[/?]|\Z)')
VIMEO_VIDEO_URL_RE = re.compile(r'https?://((?:\w+[.])?vimeo[.]com/(\d+)(?:/[0-9a-f]+)?)/*(?:(?s)#(.+))?\Z')
TIKTOK_LONG_VIDEO_URL_RE = re.compile(r'https?://(?:\w+[.])?tiktok[.]com/[@]([^/?&#]+)/video/(\d{16,})(?:[/?]|\Z)')
TIKTOK_SHORT_VIDEO_URL_RE = re.compile(r'https?://vm[.]tiktok[.]com/([a-zA-Z0-9]+)(?:[/?]|\Z)')
ANY_VIDEO_URL_RE = re.compile(r'https?://(?:[^@/]*@)?([^#?%@:/&+]+)')


def get_simple_title(title, filename_prefix=''):
  if (filename_prefix.startswith('facebookvid_') and
      title.startswith('Facebook video #') and
      filename_prefix.split('_')[1] == title.split('#', 1)[1]):
    return ''  # Redundant title. (youtube-dl always gives this.)
  return SIMPLE_RE.sub('_', title).strip('_')


assert '' == get_simple_title('Facebook video #123456789012345', 'facebookvid_123456789012345_')
assert 'Hell_W_rld', get_simple_title('Hell\xc3\xb3,  W\xc3\xb6rld!')


HARDCODED_VIDRESES = {
    '4320p': (7680, 4320),  # 16:9.
    '2160p': (3840, 2160),  # 16:9.
    '1440p': (2560, 1440),  # 16:9.
    '1080p': (1920, 1080),  # 16:9.
    '720p': (1280, 720),  # 16:9.
    '480p': (840, 480),
    '360p': (640, 360),
    '240p': (426, 240),
    '144p': (256, 144),
    # '480p': (720, 480),  # 3:2.
    # '240p': (360, 240),  # 3:2.
}


def parse_vidres(item):
  """Returns (width, height)."""
  match = VIDRES_RE.match(item)
  if match:
    return int(match.group(1)), int(match.group(2))
  return HARDCODED_VIDRESES.get(item)  # Can be None.


def yield_ainfos(data):
  mp4_audio_list = []
  mp4_video_list = []
  for line in data.split('\n'):
    line = line.replace(' only', '-only').replace(',', ' ').replace('@', ' ')
    line = (line + ' ').replace(' (', ' ').replace(') ', ' ')
    if not line or line.startswith('[') or line.startswith('format code'):
      continue
    items = line.split()
    if len(items) < 2:
      continue
    format_code, format = items[:2]
    del items[:2]  # format_code and format.
    items0, items = items, []
    for item in items0:
      ab = item.split('.', 1)
      if len(ab) > 1 and ab[0] in ('mp4a', 'vp8', 'vp9', 'avc1', 'av01'):
        items.extend(ab)
      else:
        items.append(item)
    rates = [int(match.group(1)) for item in items
             for match in (NUM_K_RE.match(item),) if match]
    if len(rates) == 1:
      rate = rates[0]
    else:
      rate = None
    vidres = None
    if items:
      vidreses = [parse_vidres(items[0])]
      if vidreses[0] is None:
        vidreses = sorted(set(filter(None, map(parse_vidres, items))))
        assert len(vidreses) <= 1, (vidreses, items)
      if vidreses:
        vidres = '%dx%d' % vidreses[0]
    is_audio_only = 'audio-only' in items
    is_video_only = 'video-only' in items
    if is_audio_only:
      assert not is_video_only, items
      assert 'video' not in items
      items = [item for item in items if item != 'audio-only' and item != 'audio']
      xtype = 'audio-only'
      assert not vidres, items
    elif is_video_only:
      assert not is_audio_only, items
      assert 'audio' not in items
      items = [item for item in items if item != 'video-only' and item != 'video']
      xtype = 'video-only'
      assert vidres, items
    elif len(items) == 1 and items[0] == 'unknown' and not vidres:
      # Fallback if only 1 option available, e.g. sendvid.com.
      xtype = 'both'
      vidres = '0x0'
    elif len(items) == 2 and items[0] == 'unknown' and items[1] == 'best' and not vidres:
      # Fallback if only 1 option available, e.g. sendvid.com.
      xtype = 'both'
      vidres = '0x0'
    else:
      xtype = 'both'
      assert vidres, items
      items = [item for item in items if item != 'audio' and item != 'video']
    items = [item for item in items if not NUM_K_RE.match(item) and not parse_vidres(item)]
    yield (format_code, format, xtype, vidres, rates, sorted(items))


# From youtube.com.
assert (
    ('249', 'webm', 'audio-only', None, [71, 50], ['2.56MiB', 'DASH', 'opus']),
    ('250', 'webm', 'audio-only', None, [93, 70], ['3.24MiB', 'DASH', 'opus']),
    ('140', 'm4a', 'audio-only', None, [130, 128], ['40.2', '6.80MiB', 'DASH', 'container', 'm4a_dash', 'mp4a']),
    ('251', 'webm', 'audio-only', None, [171, 160], ['5.91MiB', 'DASH', 'opus']),
    ('160', 'mp4', 'video-only', '256x144', [110], ['24fps', '4.04MiB', '4d400c', 'avc1']),
    ('278', 'webm', 'video-only', '256x144', [117], ['24fps', '5.27MiB', 'container', 'vp9', 'webm']),
    ('242', 'webm', 'video-only', '426x240', [219], ['24fps', '8.51MiB', 'vp9']),
    ('133', 'mp4', 'video-only', '426x240', [234], ['24fps', '4d4015', '8.38MiB', 'avc1']),
    ('243', 'webm', 'video-only', '640x360', [401], ['15.20MiB', '24fps', 'vp9']),
    ('134', 'mp4', 'video-only', '640x360', [457], ['15.92MiB', '24fps', '4d401e', 'avc1']),
    ('244', 'webm', 'video-only', '854x480', [641], ['22.86MiB', '24fps', 'vp9']),
    ('135', 'mp4', 'video-only', '854x480', [687], ['24.03MiB', '24fps', '4d401e', 'avc1']),
    ('136', 'mp4', 'video-only', '1280x720', [950], ['24fps', '34.61MiB', '4d401f', 'avc1']),
    ('247', 'webm', 'video-only', '1280x720', [1195], ['24fps', '42.46MiB', 'vp9']),
    ('248', 'webm', 'video-only', '1920x1080', [2680], ['124.98MiB', '24fps', 'vp9']),
    ('137', 'mp4', 'video-only', '1920x1080', [3296], ['125.73MiB', '24fps', '640028', 'avc1']),
    ('43', 'webm', 'both', '640x360', [128], ['0', '44.09MiB', 'medium', 'vorbis', 'vp8']),
    ('18', 'mp4', 'both', '640x360', [616, 96], ['32.39MiB', '40.2', '42001E', '44100Hz', 'avc1', 'medium', 'mp4a']),
    ('22', 'mp4', 'both', '1280x720', [2178, 192], ['40.2', '44100Hz', '64001F', 'avc1', 'best', 'hd720', 'mp4a']),
) == tuple(yield_ainfos(r"""
format code  extension  resolution note
249          webm       audio only DASH audio   71k , opus @ 50k, 2.56MiB
250          webm       audio only DASH audio   93k , opus @ 70k, 3.24MiB
140          m4a        audio only DASH audio  130k , m4a_dash container, mp4a.40.2@128k, 6.80MiB
251          webm       audio only DASH audio  171k , opus @160k, 5.91MiB
160          mp4        256x144    144p  110k , avc1.4d400c, 24fps, video only, 4.04MiB
278          webm       256x144    144p  117k , webm container, vp9, 24fps, video only, 5.27MiB
242          webm       426x240    240p  219k , vp9, 24fps, video only, 8.51MiB
133          mp4        426x240    240p  234k , avc1.4d4015, 24fps, video only, 8.38MiB
243          webm       640x360    360p  401k , vp9, 24fps, video only, 15.20MiB
134          mp4        640x360    360p  457k , avc1.4d401e, 24fps, video only, 15.92MiB
244          webm       854x480    480p  641k , vp9, 24fps, video only, 22.86MiB
135          mp4        854x480    480p  687k , avc1.4d401e, 24fps, video only, 24.03MiB
136          mp4        1280x720   720p  950k , avc1.4d401f, 24fps, video only, 34.61MiB
247          webm       1280x720   720p 1195k , vp9, 24fps, video only, 42.46MiB
248          webm       1920x1080  1080p 2680k , vp9, 24fps, video only, 124.98MiB
137          mp4        1920x1080  1080p 3296k , avc1.640028, 24fps, video only, 125.73MiB
43           webm       640x360    medium , vp8.0, vorbis@128k, 44.09MiB
18           mp4        640x360    medium  616k , avc1.42001E, mp4a.40.2@ 96k (44100Hz), 32.39MiB
22           mp4        1280x720   hd720 2178k , avc1.64001F, mp4a.40.2@192k (44100Hz) (best)
""".strip('\n')))

# From facebook.com.
assert (
    ('295505227957623ad', 'm4a', 'audio-only', None, [65], ['40.5', '48000Hz', 'DASH', '[eng]', 'container', 'm4a_dash', 'mp4a']),
    ('928452630836409v', 'mp4', 'video-only', '256x144', [111], ['4D401E', 'DASH', '[eng]', 'avc1', 'container', 'mp4_dash']),
    ('482021539290178vd', 'mp4', 'video-only', '426x240', [301], ['4D401E', 'DASH', '[eng]', 'avc1', 'container', 'mp4_dash']),
    ('2439523659427737v', 'mp4', 'video-only', '640x360', [1017], ['4D401E', 'DASH', '[eng]', 'avc1', 'container', 'mp4_dash']),
    ('735153476916781v', 'mp4', 'video-only', '852x480', [1631], ['4D401F', 'DASH', '[eng]', 'avc1', 'container', 'mp4_dash']),
    ('446115632656220v', 'mp4', 'video-only', '1280x720', [3223], ['4D401F', 'DASH', '[eng]', 'avc1', 'container', 'mp4_dash']),
    ('2358600094466962v', 'mp4', 'video-only', '1920x1080', [7370], ['4D4028', 'DASH', '[eng]', 'avc1', 'container', 'mp4_dash']),
    ('dash_sd_src', 'mp4', 'both', '0x0', [], ['unknown']),
    ('dash_sd_src_no_ratelimit', 'mp4', 'both', '0x0', [], ['unknown']),
    ('dash_hd_src', 'mp4', 'both', '0x0', [], ['best', 'unknown']),
) == tuple(yield_ainfos(r"""
format code               extension  resolution note
295505227957623ad         m4a        audio only [eng] DASH audio   65k , m4a_dash container, mp4a.40.5 (48000Hz)
928452630836409v          mp4        256x144    [eng] DASH video  111k , mp4_dash container, avc1.4D401E, video only
482021539290178vd         mp4        426x240    [eng] DASH video  301k , mp4_dash container, avc1.4D401E, video only
2439523659427737v         mp4        640x360    [eng] DASH video 1017k , mp4_dash container, avc1.4D401E, video only
735153476916781v          mp4        852x480    [eng] DASH video 1631k , mp4_dash container, avc1.4D401F, video only
446115632656220v          mp4        1280x720   [eng] DASH video 3223k , mp4_dash container, avc1.4D401F, video only
2358600094466962v         mp4        1920x1080  [eng] DASH video 7370k , mp4_dash container, avc1.4D4028, video only
dash_sd_src               mp4        unknown
dash_sd_src_no_ratelimit  mp4        unknown
dash_hd_src               mp4        unknown    (best)
""".strip('\n')))

# From xhamster.com.
assert (
    ('mp4-144p', 'mp4', 'both', '256x144', [], []),
    ('mp4-240p', 'mp4', 'both', '426x240', [], []),
    ('mp4-480p', 'mp4', 'both', '840x480', [], []),
    ('mp4-720p', 'mp4', 'both', '1280x720', [], []),
    ('mp4-2160p', 'mp4', 'both', '3840x2160', [], ['best']),
) == tuple(yield_ainfos(r"""
[info] Available formats for 1234567:
format code  extension  resolution note
mp4-144p     mp4        144p
mp4-240p     mp4        240p
mp4-480p     mp4        480p
mp4-720p     mp4        720p
mp4-2160p    mp4        2160p      (best)
""".strip('\n')))


def get_bestfixed_format(data):
  """Returns (ext, format_spec)."""
  # We ignore videos with larger than Full HD resolution. Then
  # we consider these videos: mp4 (video-only and multiplexed) and non-mp4
  # non-webm multiplexed. We choose the best by taking the largest (width *
  # height, int(is_video_only), rate). If we've chosen a video-only mp4,
  # then we add the highest-rate audio-only m4a format.
  #
  # What if video-only and multiplexed mp4 have the same resolution? In this
  # case we choose video-only, because it tends to get higher-quality audio.
  # Unfortunately it's not possible to get the video rate of multiplexed.
  #
  # We never choose webm, because `youtube-dl -F' is lying about the
  # resolution of `-f 43', it has 640x360 hardcoded.
  # https://github.com/rg3/youtube-dl/issues/14125
  ainfos = tuple(yield_ainfos(data))
  def multiply(a, b):
    return a * b
  FORMAT_ID, FORMAT, XTYPE, VIDRES, RATES, ITEMS = xrange(6)
  m4a_list = sorted(
      (a[RATES][0], a[FORMAT_ID]) for a in ainfos
      if a[FORMAT] == 'm4a' and a[XTYPE] == 'audio-only')
  vid_list = sorted(
      (multiply(*parse_vidres(a[VIDRES])), int(a[XTYPE] == 'video-only'), (a[RATES] or (1,))[0], a[FORMAT_ID], a[FORMAT])
      for a in ainfos
      if (a[FORMAT] == 'mp4' and a[XTYPE] in ('video-only', 'both') and 'av01' not in a[ITEMS])
      or (a[FORMAT] not in ('mp4', 'webm') and a[XTYPE] == 'both'))
  # This can raise an IndexError, but in practice it won't, because not all
  # videos are larger than FullHD.
  while vid_list[-1][0] > 1080 * 1920:
    vid_list.pop()
  if vid_list[-1][1]:  # A video-only mp4.
    return (vid_list[-1][4], '%s+%s' % (vid_list[-1][3], m4a_list[-1][1]))
  else:  # A multiplexed non-mp4 non-webm.
    return (vid_list[-1][4], str(vid_list[-1][3]))

  # TODO(pts): multiplexed is larger than best separate. why?
  # TODO(pts): do we want to keep the larger?
  #    -f 22         15190719 May 26  2013 Title-YYYYYYYYYYY.mp4
  #    -f ...+...    11094855 May 27  2013 youtube_YYYYYYYYYYY_Title.mp4
  #[youtube] YYYYYYYYYYY: Downloading webpage
  #[youtube] YYYYYYYYYYY: Downloading video info webpage
  #[youtube] YYYYYYYYYYY: Extracting video information
  #[youtube] YYYYYYYYYYY: Downloading MPD manifest
  #[info] Available formats for YYYYYYYYYYY:
  #format code  extension  resolution note
  #139          m4a        audio only DASH audio   48k , m4a_dash container, mp4a.40.5@ 48k (22050Hz), 222.58KiB
  #249          webm       audio only DASH audio   49k , 1fps, opus @ 50k, 220.43KiB
  #250          webm       audio only DASH audio   58k , 1fps, opus @ 70k, 250.61KiB
  #171          webm       audio only DASH audio   90k , 1fps, vorbis@128k, 414.64KiB
  #140          m4a        audio only DASH audio  127k , m4a_dash container, mp4a.40.2@128k (44100Hz), 592.33KiB
  #251          webm       audio only DASH audio  150k , 1fps, opus @160k, 672.49KiB
  #160          mp4        256x144    DASH video  103k , avc1.42c00b, 15fps, video only, 453.03KiB
  #133          mp4        426x240    DASH video  274k , avc1.4d4015, 30fps, video only, 1.23MiB
  #134          mp4        640x360    DASH video  487k , avc1.4d401e, 30fps, video only, 2.18MiB
  #135          mp4        854x480    DASH video 1120k , avc1.4d401f, 30fps, video only, 4.99MiB
  #136          mp4        1280x720   DASH video 2231k , avc1.4d401f, 30fps, video only, 10.00MiB
  #17           3gp        176x144    small , mp4v.20.3, mp4a.40.2@ 24k
  #36           3gp        320x180    small , mp4v.20.3, mp4a.40.2
  #43           webm       640x360    medium , vp8.0, vorbis@128k
  #18           mp4        640x360    medium , avc1.42001E, mp4a.40.2@ 96k
  #22           mp4        1280x720   hd720 , avc1.64001F, mp4a.40.2@192k (best)


def fix_url(id_or_url):
  match = YOUTUBE_VIDEO_URL_RE.match(id_or_url)  # Also matches just the ID.
  if match:
    return 'https://youtube.com/watch?v=' + match.group(1), ''
  match = TIKTOK_SHORT_VIDEO_URL_RE.match(id_or_url)
  if match:
    return 'https://vm.tiktok.com/%s/' % match.group(1), ''
  match = TIKTOK_LONG_VIDEO_URL_RE.match(id_or_url)
  if match:
    return 'https://www.tiktok.com/@%s/video/%s' % (match.group(1), match.group(2)), ''
  match = FACEBOOK_VIDEO_URL_RE.match(id_or_url)
  if match:
    return 'https://facebook.com/%s/videos/%s' % (match.group(1), match.group(2)), ''
  match = XHAMSTER_VIDEO_URL_RE.match(id_or_url)
  if match:
    return 'https://%s' % match.group(1), ''
  match = VIMEO_VIDEO_URL_RE.match(id_or_url)
  if match:
    return 'https://%s' % match.group(1), match.group(3) or ''
  match = ANY_VIDEO_URL_RE.match(id_or_url)
  if match:
    print >>sys.stderr, 'warning: unknown site for video: %s' % id_or_url
    return id_or_url, ''  # Don't change https:// to http:// by default.
  raise ValueError('Not a video ID or URL: %s' % id_or_url)


def get_filename_prefix(id_or_url):
  match = YOUTUBE_VIDEO_URL_RE.match(id_or_url)  # Also matches just the ID.
  if match:
    return 'youtube_%s_' % match.group(1)
  match = TIKTOK_SHORT_VIDEO_URL_RE.match(id_or_url)
  if match:
    return 'tiktok_%s_' % match.group(1)
  match = TIKTOK_LONG_VIDEO_URL_RE.match(id_or_url)
  if match:
    return 'tiktok_%s_' % match.group(2)
  match = FACEBOOK_VIDEO_URL_RE.match(id_or_url)
  if match:
    return 'facebookvid_%s_' % match.group(2)
  match = XHAMSTER_VIDEO_URL_RE.match(id_or_url)
  if match:
    return 'xhamster_%s_' % match.group(2)
  match = VIMEO_VIDEO_URL_RE.match(id_or_url)
  if match:
    return 'vimeo_%s_' % match.group(2)
  match = ANY_VIDEO_URL_RE.match(id_or_url)
  if match:
    # Convert es.xhamster.com to dlvid-xhamster-com_%(id)s_
    return 'dlvid-%s_%%(id)s_' % get_simple_title(
        '.'.join(match.group(1).split('.')[-2:])).replace('_', '-')
  return None


def get_cookie_args(url):
  if '://youtube.com/' in url:
    homedir = os.getenv('HOME', '')
    if homedir and os.path.isdir(homedir):
      filename = os.path.join(homedir, '.youtube_cookies.txt')
      if os.path.isfile(filename):
        # Using cookies fixes this youtube-dl error:
        # ERROR: ???????????: YouTube said: Unable to extract video data
        # https://github.com/ytdl-org/youtube-dl/issues/26152#issuecomment-674781915
        return ('--cookies', filename)
  return ()


def get_ffmpeg_args():
  homedir = os.getenv('HOME', '')
  if homedir:
    # With any other filename:
    # WARNING: Cannot identify executable /home/pts/.youtube_dl.ffmpeg, its basename should be one of avprobe, avconv, ffmpeg, ffprobe. Continuing without avconv/ffmpeg.
    filename = os.path.join(homedir, '.viddl/ffmpeg')
    if os.path.isfile(filename):
      return ('--ffmpeg-location', filename)
  return ()


def get_video_format_data(url):
  cmd = ['youtube-dl', '-F']
  cmd.extend(get_cookie_args(url))
  cmd.extend(('--', url))
  p = subprocess.Popen(
      cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
  try:
    p.stdin.close()
    data = p.stdout.read()
  finally:
    exit_code = p.wait()
  if exit_code:
    # TODO(pts): ERROR: YYYYYYYYYYY: YouTube said: This video does not exist.
    # RuntimeError: youtube-dl -F failed with exit code 1
    raise RuntimeError('youtube-dl -F failed with exit code %d' % exit_code)
  return data


def download_video_yt_dlp(url, filename_prefix, entries):
  prefix = filename_prefix + '+'
  suffix = '.mp4'
  matching_entries = [e for e in entries if e.startswith(prefix) and e.endswith(suffix)]
  del entries
  cmd = None
  force_title = None
  if not matching_entries:
    cmds = []
    if filename_prefix.startswith('youtube_'):
      # TODO(pts): Add --mark-watched for YouTube, just like the old one.
      cmd = [
         'yt-dlp',
          '--print-to-file', '%(title)s', filename_prefix.replace('%', '%%') + '+.ytd',
         '-o', filename_prefix.replace('%', '%%') + '+%(title).100s.%(ext)s',
         '-f', 'ba[ext!=webm]+bv[ext!=webm]', '-S', 'res:1080',
      ]
      cmd.extend(get_ffmpeg_args())
      cmd.append(url)
      cmds.append(cmd)
    elif filename_prefix.startswith('tiktok_'):
      # `[format_id!=play_addr]' is there to skip downloading image
      # slideshows as audio-only .mp4 files with best[ext=mp4][vcodec=h264].
      # This error will be reported: ERROR: [TikTok] 1234...: Requested format is not available. Use --list-formats for a list of available formats
      #
      # `[format_id!^=download_addr]' is there to skip watermarked videos.
      cmd = [
          'yt-dlp',
          '--print-to-file', '%(id)s_%(uploader)s,,%(title)s', filename_prefix.replace('%', '%%') + '+.ytd',
          # mplayer2 can't play H.265 (vcodec=h265), which is the highest resolution for TikTok.
          '-o', filename_prefix.replace('%', '%%') + '+%(id)s_%(uploader)s,,%(title).100s.h264.%(ext)s',
          '-f', 'best[ext=mp4][vcodec=h264][format_id!=play_addr][format_id!^=download_addr]',
      ]
      cmd.extend(get_ffmpeg_args())
      cmd.append(url)
      cmds.append(cmd)
      cmd = [
          'yt-dlp',
          '--print-to-file', '%(id)s_%(uploader)s,,%(title)s', filename_prefix.replace('%', '%%') + '+.ytd',
          '-o', filename_prefix.replace('%', '%%') + '+%(id)s_%(uploader)s,,%(title).100s..%(ext)s',
          '-f', 'best[ext=mp4][vcodec!=h264][format_id!=play_addr][format_id!^=download_addr]',
      ]
      cmd.extend(get_ffmpeg_args())
      cmd.append(url)
      cmds.append(cmd)
    else:
      raise ValueError('Unknown hosting platform: ' + filename_prefix)
    for cmd in cmds:
      p = subprocess.Popen(cmd, stdin=subprocess.PIPE)
      try:
        p.stdin.close()
      finally:
        exit_code = p.wait()
      if exit_code:
        raise RuntimeError('yt-dlp failed with exit code %d' % exit_code)
    matching_entries = [e for e in os.listdir('.') if e.startswith(prefix) and e.endswith(suffix)]
  if filename_prefix.startswith('tiktok_'):
    try:
      f = open(filename_prefix + '+.ytd')
      try:
        force_title = f.read().rstrip('\r\n')
        if not force_title:
          force_title = None
      finally:
        f.close()
    except (IOError, OSError):
      pass
  if not matching_entries:
    raise ValueError('No files downloaded.')
  if len(matching_entries) != 1 + filename_prefix.startswith('tiktok_'):  # For TikTok, we require 2 downloaded files: *.h265.mp4 and *..mp4.
    raise ValueError('Multiple files downloaded: %r' % (matching_entries,))
  for filename in matching_entries:
    if filename.startswith('tiktok_') and filename.endswith('..mp4'):
      suffix2 = '..mp4'
    elif filename.startswith('tiktok_') and filename.endswith('.h264.mp4'):
      suffix2 = '.h264.mp4'
    else:
      suffix2 = suffix  # '.mp4'.
    if force_title is None:
      title = filename[len(prefix) : -len(suffix2)]
    else:
      title = force_title  # force_title is longer, it doesn't have the %(title).100s limit to avoid the ``File name too long'' error.
    if filename.startswith('tiktok_'):  # Keep the first ',,'.
      i = title.find(',,') + 2
      if i >= 2:
        simple_title = title[:i] + get_simple_title(title[i:], filename_prefix)
      else:
        simple_title = get_simple_title(title, filename_prefix)
    else:
      simple_title = get_simple_title(title, filename_prefix)
    max_title_size = 255 - len(filename_prefix) - len(suffix2) - 10  # Linux ext4 filesystem can do <=255 characters per pathname component. 10 is for appending later.
    if len(simple_title) > max_title_size:
      while max_title_size > 0 and 0x80 <= ord(simple_title[max_title_size]) <= 0xbf:  # Remove byte from partial UTF-8 character. Usually not needed, because get_simple_title(...) returns ASCII.
        max_title_size -= 1
      simple_title = simple_title[:max_title_size]
    saved_filename = filename_prefix + simple_title + suffix2
    i = 0
    while os.path.exists(saved_filename):
      i += 1
      # Don't overwrite existing files. (This detection has a race condition
      # causing an unintended overwrite if multiple programs are creating
      # files in the directory at the same time.)
      saved_filename = '%s%s-%d%s' % (
          filename_prefix or 'dlvid_', simple_title, i, suffix)
    print >>sys.stderr, (
        'info: renaming downloaded video to: %s' % saved_filename)
    if filename != saved_filename:
      os.rename(filename, saved_filename)
  try:
    os.remove(filename_prefix + '+.ytd')
  except OSError:
    pass


def download_video(id_or_url, format='bestfixed'):
  url, title_prefix = fix_url(id_or_url)
  if title_prefix:
    title_prefix = get_simple_title(urllib.unquote_plus(title_prefix))
  if title_prefix:
    title_prefix += '_'
  else:
    title_prefix = ''
  filename_prefix = get_filename_prefix(url) or ''
  entries = []
  if filename_prefix and '%(' not in filename_prefix:
    entries = [e for e in os.listdir('.') if e.startswith(filename_prefix)]
    if [1 for e in entries if e[len(filename_prefix) : len(filename_prefix) + 1] != '+' and
        not e.endswith('.lst') and not e.endswith('.txt')]:
      print >>sys.stderr, 'info: skipping already downloaded: %s: %s: %s' % (
          filename_prefix, id_or_url, url)
      return
  del id_or_url
  print >>sys.stderr, 'info: using prefix %s and URL %s' % (
      filename_prefix + title_prefix, url)
  if (filename_prefix.startswith('youtube_') or
      filename_prefix.startswith('tiktok_')):
    return download_video_yt_dlp(url, filename_prefix, entries)
  del entries
  # Everything below uses youtube-dl (rather than yt-dlp), and thus is
  # untested at Sun Dec 25 00:45:41 CET 2022.
  format_items = format.split('/')
  if format_items[0] == 'bestfixed':
    if 0 and filename_prefix.startswith('vimeo_'):
      # By enabling this we'd get unplayable audio.
      format_items[0] = 'best[width<=1920]'
    else:
      data = get_video_format_data(url)
      unused_ext, format_items[0] = get_bestfixed_format(data)
  format = '/'.join(format_items)
  tmp_prefix = 'ptsviddltmp.%d.' % os.getpid()
  try:
    # We need the ~~~ delimiter because youtube-dl is trying to be smart and
    # appends .mp4 to the output filename after multiplexing.
    cmd = ['youtube-dl', '-f', format, '--mark-watched']
    cmd.extend(get_cookie_args(url))
    cmd.extend(get_ffmpeg_args())
    if filename_prefix.startswith('facebookvid_'):
      # Many retries after ``Connection reset by peer''.
      cmd.extend(('-R', '200'))
    else:
      cmd.extend(('-R', '20'))
    cmd.extend(('-o', tmp_prefix + DOWNLOADED_FILENAME_FORMAT, '--', url))
    print >>sys.stderr, 'info: downloading with: %s' % (
        ' '.join(map(pipes.quote, cmd)))
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE)
    try:
      p.stdin.close()
    finally:
      exit_code = p.wait()
    if exit_code:
      raise RuntimeError('youtube-dl failed with exit code %d' % exit_code)
    filenames = [e for e in os.listdir('.') if e.startswith(tmp_prefix)]
    if not filenames:
      raise ValueError('No files downloaded.')
    if len(filenames) > 1:
      raise ValueError('Multiple files downloaded: %r' % (filenames,))
    match = DOWNLOADED_FILENAME_RE.match(filenames[0][len(tmp_prefix):])
    if not match:
      raise ValueError('Unrecognized downloaded filename: %s' % filenames[0])
    video_id, title, ext = match.group(1), match.group(2), match.group(3)
    if '%(' in filename_prefix:
      values = {'id': video_id, 'title': title, 'ext': ext}
      filename_prefix = filename_prefix % values  # Apply format template.
    simple_title = title_prefix + get_simple_title(title, filename_prefix)
    saved_filename = '%s%s.%s' % (
        filename_prefix or 'dlvid_', simple_title, ext)
    i = 0
    while os.path.exists(saved_filename):
      i += 1
      # Don't overwrite existing files. (This detection has a race condition
      # causing an unintended overwrite if multiple programs are creating
      # files in the directory at the same time.)
      saved_filename = '%s%s-%d.%s' % (
          filename_prefix or 'dlvid_', simple_title, i, ext)
    print >>sys.stderr, (
        'info: renaming downloaded video to: %s' % saved_filename)
    os.rename(filenames[0], saved_filename)
  finally:
    # Cleanup: delete temporary files.
    for entry in os.listdir('.'):
      if entry.startswith(tmp_prefix):
        try:
          os.remove(entry)
        except OSError:
          pass


def query_video_format(id_or_url):
  url, title_prefix = fix_url(id_or_url)
  sys.stdout.write(get_video_format_data(url))
  if title_prefix:
    sys.stdout.write('title_prefix: %s\n' % title_prefix)


def main(argv):
  if len(argv) < 2 or argv[1] == '--help':
    print get_doc()
    sys.exit(0)
  format = 'bestfixed'
  is_format_query = False
  i = 1
  while i < len(argv):
    arg = argv[i]
    if arg == '-' or not arg.startswith('-'):
      break
    i += 1
    if arg == '--':
      break
    elif arg == '-f':
      if i == len(argv):
        sys.exit('fatal: missing argument of: %s' % arg)
      format = argv[i]
      i += 1
    elif arg == '-F':
      is_format_query = True
    else:
      sys.exit('fatal: unknown command-line flag: %s' % arg)

  had_error = False
  for id_or_url in argv[i:]:
    try:
      if is_format_query:
        query_video_format(id_or_url)
      else:
        download_video(id_or_url, format)
    except (RuntimeError, ValueError), e:
      print >>sys.stderr, 'error: %s.%s: %s' % (
          e.__class__.__module__, e.__class__.__name__, e)
      had_error = True
  if had_error:
    sys.exit(2)


if __name__ == '__main__':
  sys.exit(main(sys.argv))
